"use client";

import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Trash2, Upload, Download, ChevronDown, ChevronUp, FileDown, Minimize2, Maximize2, ArrowUp, ArrowDown, AlertTriangle, Info } from "lucide-react";
import { calculateSmartEdge, getConfidenceLevel, type Trader, type SmartEdgeResult } from "@/utils/calculateSmartEdge";
import { parseTraderCSV, generateTraderCSV } from "@/utils/csvParserV1.2";
import Head from 'next/head';
import { CrowdProbabilityDisplay } from '@/components/CrowdProbabilityDisplay';
import { toast } from "sonner";

// Simple tooltip component
const InfoTooltip = ({ content, children }: { content: React.ReactNode, children: React.ReactNode }) => {
  const [show, setShow] = useState(false);
  const tooltipRef = useRef<HTMLDivElement>(null);
  
  return (
    <div 
      className="relative inline-block cursor-help" 
      onMouseEnter={() => setShow(true)} 
      onMouseLeave={() => setShow(false)}
    >
      {children}
      {show && (
        <div 
          ref={tooltipRef}
          className="absolute bottom-full left-1/2 transform -translate-x-1/2 -translate-y-2 bg-black/90 dark:bg-gray-700 text-white dark:text-gray-100 text-xs rounded px-2 py-1 mb-1 max-w-xs z-50"
        >
          {content}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-t-4 border-r-4 border-l-4 border-t-black/90 dark:border-t-gray-700 border-r-transparent border-l-transparent"></div>
        </div>
      )}
    </div>
  );
};

export default function SmartEdgeCalculatorPage() {
  const [mounted, setMounted] = useState(false);
  const [showHowItWorks, setShowHowItWorks] = useState(false);
  const [showCalculationDetails, setShowCalculationDetails] = useState(false);
  const [traders, setTraders] = useState<Trader[]>([
    { name: "Trader 1", sentiment: "yes", smartScore: 75, dollarPosition: 1000 },
    { name: "Trader 2", sentiment: "no", smartScore: 60, dollarPosition: 500 },
  ]);

  const [result, setResult] = useState<SmartEdgeResult | null>(null);
  const [marketPrice, setMarketPrice] = useState<number>(50);
  const [bankroll, setBankroll] = useState<number>(100);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (mounted && traders.length > 0) {
      const calculation = calculateSmartEdge(traders, marketPrice, bankroll);
      setResult(calculation);
    }
  }, [traders, mounted, marketPrice, bankroll]);

  const addTrader = () => {
    setTraders([...traders, { sentiment: "yes", smartScore: 0, dollarPosition: 0 }]);
  };

  const removeTrader = (index: number) => {
    setTraders(traders.filter((_, i) => i !== index));
  };

  const removeZeroScoreTraders = () => {
    const filteredTraders = traders.filter(trader => trader.smartScore !== 0);
    if (traders.length === filteredTraders.length) {
      toast.info("No traders with zero smart scores found");
      return;
    }
    const removedCount = traders.length - filteredTraders.length;
    setTraders(filteredTraders);
    toast.success(`Removed ${removedCount} trader${removedCount > 1 ? 's' : ''} with zero smart scores`);
  };

  const updateTrader = (index: number, field: keyof Trader, value: string | number) => {
    const updated = [...traders];
    updated[index] = {
      ...updated[index],
      [field]: field === 'smartScore' || field === 'dollarPosition' ? Number(value) : value
    };
    setTraders(updated);
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>, sentiment: 'yes' | 'no') => {
    const file = event.target.files?.[0];
    if (!file) return;

    console.log(`Processing ${sentiment} sentiment file:`, file.name);

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const content = e.target?.result as string;
        console.log('File content:', content);
        
        const parsedTraders = await parseTraderCSV(content, sentiment);
        console.log('Parsed traders:', parsedTraders);
        
        // Remove existing traders with the same sentiment
        const filteredTraders = traders.filter(t => t.sentiment !== sentiment);
        console.log('Filtered traders:', filteredTraders);
        
        // Add new traders
        const newTraders = [...filteredTraders, ...parsedTraders];
        console.log('New traders array:', newTraders);
        
        setTraders(newTraders);
        toast.success(`${sentiment.toUpperCase()} sentiment CSV file uploaded successfully`);
      } catch (error) {
        console.error('Error processing file:', error);
        toast.error(error instanceof Error ? error.message : 'Failed to parse CSV file');
      }
    };
    reader.onerror = (error) => {
      console.error('Error reading file:', error);
      toast.error('Error reading file');
    };
    reader.readAsText(file);
  };

  const handleDownload = (sentiment: 'yes' | 'no') => {
    const filteredTraders = traders.filter(t => t.sentiment === sentiment);
    const csvContent = generateTraderCSV(filteredTraders);
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${sentiment}-traders.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleDownloadResults = () => {
    if (!result) return;
    
    // Create CSV content
    const lines = [
      // Headers
      'Calculation Results,Value',
      `Smart Edge Score,${result.gravitySmart.toFixed(4)}`,
      `Confidence Level,${result.confidenceLevel}`,
      `Average Smart Score,${result.avgSmartScore.toFixed(2)}`,
      `Smart Skew,${result.smartSkew.toFixed(4)}`,
      `Raw Yes Probability,${(result.rawYesProb * 100).toFixed(2)}%`,
      `Calibrated Yes Probability,${(result.calibratedYesProb * 100).toFixed(2)}%`,
      `Probability Range,${(result.probabilityRange.lower * 100).toFixed(2)}% - ${(result.probabilityRange.upper * 100).toFixed(2)}%`,
      '',
      'Trader Influence Breakdown',
      'Trader,Smart Score,Dollar Position,Sentiment,Weight,Influence %'
    ];
    
    // Add trader data
    result.traderInfluences.forEach(trader => {
      lines.push(`${trader.name},${trader.smartScore},${trader.dollarPosition.toFixed(2)},${trader.sentiment},${trader.weight.toFixed(4)},${trader.influencePercent.toFixed(2)}%`);
    });
    
    const csvContent = lines.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'smart-edge-calculation-results.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    toast.success('Calculation results downloaded successfully');
  };

  // Helper functions for formatting and display
  const getNumericConfidence = (confidenceLevel: string): number => {
    if (confidenceLevel.includes("High")) return 85;
    if (confidenceLevel.includes("Medium")) return 55;
    return 25;
  };

  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount);
  };

  const getEdgeColor = (edge: number): string => {
    if (edge > 0) return 'text-green-600 dark:text-green-400';
    if (edge < 0) return 'text-red-600 dark:text-red-400';
    return 'text-gray-600 dark:text-gray-400';
  };

  if (!mounted) return null;

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <Head>
        <title>Smart Edge Index Calculator v1.2</title>
      </Head>
      <h1 className="text-3xl font-bold mb-6 text-center">Smart Edge Index Calculator v1.2</h1>
      <p className="text-gray-500 dark:text-gray-400 mb-6 text-center">
        Calculate weighted consensus with exponentially-weighted smart scores for better edge detection
      </p>

      <Card className="mb-6 shadow-lg">
        <CardHeader className="cursor-pointer" onClick={() => setShowHowItWorks(!showHowItWorks)}>
          <div className="flex items-center justify-between">
            <CardTitle className="text-2xl">How It Works</CardTitle>
            <Button variant="ghost" size="icon">
              {showHowItWorks ? <ChevronUp className="h-5 w-5" /> : <ChevronDown className="h-5 w-5" />}
            </Button>
          </div>
        </CardHeader>
        {showHowItWorks && (
          <CardContent className="text-sm text-gray-700 dark:text-gray-300 space-y-3">
            <p>
              This calculator uses a Smart Edge Index model to extract real edge from trader sentiment, smart scores, and dollar positions.
              It focuses on individual trader value rather than raw consensus, with disproportionate weighting of high smart scores.
            </p>
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold mb-2">Mathematical Formulas:</h3>
                <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-md space-y-3">
                  <div>
                    <p className="font-mono text-sm mb-1">1. Score Emphasis:</p>
                    <p className="text-sm">scoreEmphasis = exp(SmartScore/k)</p>
                    <ul className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      <li>â€¢ k = 30 (tunable parameter to control exponential steepness)</li>
                      <li>â€¢ Uses exponential function instead of tanh for stronger emphasis</li>
                      <li>â€¢ Gives high smart scores disproportionate influence</li>
                    </ul>
                  </div>
                  <div>
                    <p className="font-mono text-sm mb-1">2. Edge Weight per Trader:</p>
                    <p className="text-sm">edgeWeight = Sentiment Ã— scoreEmphasis Ã— ln(Dollar Position + 1)</p>
                    <ul className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      <li>â€¢ Sentiment: +1 (yes) or -1 (no)</li>
                      <li>â€¢ ln(): Natural logarithm for position compression</li>
                      <li>â€¢ Combines sentiment, smart score, and capital</li>
                    </ul>
                  </div>
                  <div>
                    <p className="font-mono text-sm mb-1">3. Smart Capital Skew:</p>
                    <p className="text-sm">smartSkew = (smartYesCapital - smartNoCapital) / (smartYesCapital + smartNoCapital)</p>
                    <ul className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      <li>â€¢ Considers only traders with smart scores > 70</li>
                      <li>â€¢ Measures how concentrated capital is among smarter traders</li>
                      <li>â€¢ Values between -1 (all smart money on NO) to +1 (all smart money on YES)</li>
                    </ul>
                  </div>
                  <div>
                    <p className="font-mono text-sm mb-1">4. Smart-Weighted Gravity Score:</p>
                    <p className="text-sm">gravitySmart = sum(edgeWeights) / sum(|edgeWeights|)</p>
                    <ul className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      <li>â€¢ Normalized weighted score between -1 and +1</li>
                      <li>â€¢ Represents net smart-weighted consensus direction</li>
                    </ul>
                  </div>
                  <div>
                    <p className="font-mono text-sm mb-1">5. Raw Probability:</p>
                    <p className="text-sm">rawYesProb = (gravitySmart + 1) / 2</p>
                  </div>
                  <div>
                    <p className="font-mono text-sm mb-1">6. Confidence Factor & Calibrated Probability:</p>
                    <p className="text-sm">confidenceFactor = min(1, |smartSkew|^0.6)</p>
                    <p className="text-sm">calibratedYesProb = 0.5 + (rawYesProb - 0.5) Ã— confidenceFactor</p>
                    <ul className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      <li>â€¢ Confidence derived from smartSkew (smart capital distribution)</li>
                      <li>â€¢ Higher smart capital concentration â†’ higher confidence</li>
                      <li>â€¢ Pulls probability back toward 50% when confidence is low</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="font-semibold mb-2">Key Features:</h3>
                <ul className="list-disc pl-6 space-y-1">
                  <li><strong>Balance of Power:</strong> No single trader can dominate the consensus</li>
                  <li><strong>Smart Score Impact:</strong> Higher scores still have more influence</li>
                  <li><strong>Dollar Position Scaling:</strong> Logarithmic scaling for fair weighting</li>
                  <li><strong>Uncertainty Quantification:</strong> Probability ranges show confidence</li>
                  <li><strong>Robust Statistics:</strong> Resistant to outliers and manipulation</li>
                </ul>
              </div>

                              <div>                <h3 className="font-semibold mb-2">Comparison to Original Model:</h3>                <ul className="list-disc pl-6 space-y-1">                  <li>Replaced tanh with exponential for score emphasis</li>                  <li>Added smart capital skew measure for better confidence</li>                  <li>Removed softmax normalization to preserve smart trader influence</li>                  <li>Higher minimum edge thresholds for betting recommendations</li>                  <li>Emphasizes individual trader quality over crowd consensus</li>                </ul>              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Trader Input</CardTitle>
          <CardDescription>Enter trader details, sentiment, smart scores, and dollar positions</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <h3 className="text-sm font-medium mb-2">YES Sentiment Traders</h3>
              <div className="flex gap-2">
                <div className="flex-1">
                  <Label htmlFor="yes-csv-upload" className="cursor-pointer">
                    <div className="flex items-center gap-2 p-2 border rounded-md hover:bg-gray-50 dark:hover:bg-gray-800">
                      <Upload className="h-4 w-4" />
                      <span>Upload YES CSV</span>
                    </div>
                  </Label>
                  <Input
                    id="yes-csv-upload"
                    type="file"
                    accept=".csv"
                    className="hidden"
                    onChange={(e) => handleFileUpload(e, 'yes')}
                  />
                </div>
                <Button onClick={() => handleDownload('yes')} variant="outline" className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Download
                </Button>
              </div>
            </div>
            <div>
              <h3 className="text-sm font-medium mb-2">NO Sentiment Traders</h3>
              <div className="flex gap-2">
                <div className="flex-1">
                  <Label htmlFor="no-csv-upload" className="cursor-pointer">
                    <div className="flex items-center gap-2 p-2 border rounded-md hover:bg-gray-50 dark:hover:bg-gray-800">
                      <Upload className="h-4 w-4" />
                      <span>Upload NO CSV</span>
                    </div>
                  </Label>
                  <Input
                    id="no-csv-upload"
                    type="file"
                    accept=".csv"
                    className="hidden"
                    onChange={(e) => handleFileUpload(e, 'no')}
                  />
                </div>
                <Button onClick={() => handleDownload('no')} variant="outline" className="flex items-center gap-2">
                  <Download className="h-4 w-4" />
                  Download
                </Button>
              </div>
            </div>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name (Optional)</TableHead>
                <TableHead>Sentiment</TableHead>
                <TableHead>Smart Score (-100 to +100)</TableHead>
                <TableHead>Dollar Position ($)</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {traders.map((trader, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Input
                      type="text"
                      placeholder="e.g., Trader 1"
                      value={trader.name || ''}
                      onChange={(e) => updateTrader(index, 'name', e.target.value)}
                      className="w-[150px]"
                    />
                  </TableCell>
                  <TableCell>
                    <Select
                      value={trader.sentiment}
                      onValueChange={(value: 'yes' | 'no') => updateTrader(index, 'sentiment', value)}
                    >
                      <SelectTrigger className="w-[100px]">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="yes">YES</SelectItem>
                        <SelectItem value="no">NO</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Input
                      type="number"
                      min={-100}
                      max={100}
                      value={trader.smartScore}
                      onChange={(e) => updateTrader(index, 'smartScore', e.target.value)}
                      className="w-[150px]"
                    />
                  </TableCell>
                  <TableCell>
                    <Input
                      type="number"
                      min={0}
                      value={trader.dollarPosition}
                      onChange={(e) => updateTrader(index, 'dollarPosition', e.target.value)}
                      className="w-[150px]"
                    />
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeTrader(index)}
                      disabled={traders.length <= 1}
                    >
                      <Trash2 className="h-4 w-4 text-red-500" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          <div className="mt-4 flex gap-2">
            <Button onClick={addTrader}>
              Add Trader
            </Button>
            <Button 
              variant="outline" 
              onClick={removeZeroScoreTraders}
              className="text-orange-500 border-orange-500 hover:bg-orange-50 dark:hover:bg-orange-950/20"
            >
              Remove Zero Scores
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Market Settings</CardTitle>
          <CardDescription>Enter current market price and your bankroll</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="market-price">Market Price (Â¢)</Label>
              <div className="flex items-center mt-1">
                <Input
                  id="market-price"
                  type="number"
                  min={1}
                  max={99}
                  value={marketPrice}
                  onChange={(e) => setMarketPrice(Number(e.target.value))}
                  className="w-[150px]"
                />
                <span className="ml-2">Â¢</span>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                Enter market price in cents (1-99)
              </p>
            </div>
            <div>
              <Label htmlFor="bankroll">Your Bankroll ($)</Label>
              <div className="flex items-center mt-1">
                <Input
                  id="bankroll"
                  type="number"
                  min={1}
                  value={bankroll}
                  onChange={(e) => setBankroll(Number(e.target.value))}
                  className="w-[150px]"
                />
                <span className="ml-2">$</span>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                Used for Kelly bet sizing calculations
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Results Section */}
      {result && (
        <>
          <Card className="mb-6">
            <CardHeader className="relative">
              <CardTitle className="text-2xl">Smart Edge Results</CardTitle>
              <CardDescription>Analyze market probabilities and edge</CardDescription>
              <Button 
                className="absolute right-4 top-4" 
                variant="outline"
                onClick={handleDownloadResults}
              >
                <FileDown className="mr-2 h-4 w-4" />
                Export Results
              </Button>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  {/* Main Probability Display */}
                  <div className="mb-6 bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-950/30 dark:to-blue-950/30 p-4 rounded-lg border border-blue-100 dark:border-blue-900">
                    <h3 className="text-lg font-semibold mb-2">Calibrated Probability</h3>
                    <div className="flex items-center justify-center">
                      <CrowdProbabilityDisplay 
                        gravityScore={result.gravitySmart}
                      />
                    </div>
                    <div className="grid grid-cols-2 mt-4 gap-2 text-center">
                      <div>
                        <p className="text-xs text-gray-500 mb-1">YES Probability</p>
                        <p className="text-xl font-bold">{(result.calibratedYesProb * 100).toFixed(1)}%</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 mb-1">NO Probability</p>
                        <p className="text-xl font-bold">{((1 - result.calibratedYesProb) * 100).toFixed(1)}%</p>
                      </div>
                    </div>
                    <div className="mt-4">
                      <p className="text-xs text-gray-500 mb-1">Uncertainty Range (95% confidence)</p>
                      <div className="flex items-center justify-between">
                        <span className="text-sm">{(result.probabilityRange.lower * 100).toFixed(1)}%</span>
                        <div className="h-2 flex-1 mx-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-blue-500" 
                            style={{ 
                              marginLeft: `${result.probabilityRange.lower * 100}%`,
                              width: `${(result.probabilityRange.upper - result.probabilityRange.lower) * 100}%`
                            }}
                          ></div>
                        </div>
                        <span className="text-sm">{(result.probabilityRange.upper * 100).toFixed(1)}%</span>
                      </div>
                    </div>
                  </div>

                  {/* Smart Score & Confidence */}
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border">
                      <h3 className="text-sm font-medium mb-2">Average Smart Score</h3>
                      <p className="text-2xl font-bold">{result.avgSmartScore.toFixed(1)}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        Weighted average score across all traders
                      </p>
                    </div>
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border">
                      <h3 className="text-sm font-medium mb-2">Smart Skew</h3>
                      <p className="text-2xl font-bold">{result.smartSkew.toFixed(3)}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        Distribution of smart capital (-1 to +1)
                      </p>
                    </div>
                  </div>

                  {/* Smart Capital */}
                  <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border mb-6">
                    <h3 className="text-sm font-medium mb-2">Smart Capital Distribution</h3>
                    <div className="flex items-center mt-2">
                      <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-4 overflow-hidden">
                        {result.smartYesCapital + result.smartNoCapital > 0 ? (
                          <div 
                            className="bg-green-500 h-full" 
                            style={{ 
                              width: `${(result.smartYesCapital / (result.smartYesCapital + result.smartNoCapital)) * 100}%` 
                            }}
                          ></div>
                        ) : (
                          <div className="bg-gray-400 h-full w-1/2"></div>
                        )}
                      </div>
                    </div>
                    <div className="flex justify-between mt-1 text-sm">
                      <div>
                        <span className="font-medium">YES: </span>
                        <span>{formatCurrency(result.smartYesCapital)}</span>
                      </div>
                      <div>
                        <span className="font-medium">NO: </span>
                        <span>{formatCurrency(result.smartNoCapital)}</span>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500 mt-3">
                      Capital from traders with smart scores {'>>'} 70
                    </p>
                  </div>
                </div>

                <div>
                  {/* Kelly Betting Section */}
                  {result.kellyBetting && (
                    <div className="mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border">
                      <h3 className="text-lg font-semibold mb-2">Betting Edge Analysis</h3>
                      
                      <div className="mb-4">
                        <div className="flex justify-between">
                          <span className="text-sm">Your Probability:</span>
                          <span className="text-sm font-medium">{(result.calibratedYesProb * 100).toFixed(1)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-sm">Market Probability:</span>
                          <span className="text-sm font-medium">{(result.kellyBetting.marketProbability * 100).toFixed(1)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-sm">Edge:</span>
                          <span className={`text-sm font-bold ${getEdgeColor(result.kellyBetting.edge)}`}>
                            {(Math.abs(result.kellyBetting.edge) * 100).toFixed(1)}%
                            {result.kellyBetting.edge > 0 ? ' (underpriced)' : ' (overpriced)'}
                          </span>
                        </div>
                      </div>
                      
                      <div className="bg-white dark:bg-gray-900 rounded p-3 border mb-4">
                        <div className="flex justify-between mb-1">
                          <span className="text-sm font-medium">Recommended Bet:</span>
                          {result.kellyBetting.shouldBet ? (
                            <span className="text-sm font-bold text-green-600 dark:text-green-400">
                              {result.kellyBetting.betSide.toUpperCase()} ({result.kellyBetting.betConfidence})
                            </span>
                          ) : (
                            <span className="text-sm font-bold text-red-600 dark:text-red-400">
                              NO BET
                            </span>
                          )}
                        </div>
                        
                        <div className="flex justify-between mb-1">
                          <span className="text-sm">Bet Size:</span>
                          <span className="text-sm font-medium">
                            {formatCurrency(result.kellyBetting.recommendedBetSize)}
                            {result.kellyBetting.shouldBet && 
                              ` (${(result.kellyBetting.safeKellyFraction * 100).toFixed(1)}%)`}
                          </span>
                        </div>
                        
                        <div className="mt-2 text-xs text-gray-600 dark:text-gray-400">
                          <p>{result.kellyBetting.betReasoning}</p>
                        </div>
                      </div>
                      
                      {/* Optimal Strategy */}
                      {result.optimalStrategy && (
                        <div className="bg-white dark:bg-gray-900 rounded p-3 border">
                          <h4 className="text-sm font-semibold mb-2">Risk Management Strategy</h4>
                          
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            <div>
                              <p className="text-xs text-gray-500">Maximum Risk</p>
                              <p className="text-sm">{(result.optimalStrategy.maximumRisk * 100).toFixed(0)}% of bankroll</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500">Stop Loss</p>
                              <p className="text-sm">{(result.optimalStrategy.stopLossThreshold * 100).toFixed(0)}% of bankroll</p>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            <div>
                              <p className="text-xs text-gray-500">Edge Threshold</p>
                              <p className="text-sm">{(result.optimalStrategy.edgeThreshold * 100).toFixed(0)}% minimum</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500">Decision</p>
                              <p className={`text-sm font-medium ${result.optimalStrategy.shouldBet ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                                {result.optimalStrategy.shouldBet ? 'PLACE BET' : 'AVOID BET'}
                              </p>
                            </div>
                          </div>
                          
                          <div className="mt-1 text-xs text-gray-600 dark:text-gray-400">
                            <p>{result.optimalStrategy.reasoning}</p>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Calculation Details */}
                  <Card>
                    <CardHeader className="cursor-pointer py-3" onClick={() => setShowCalculationDetails(!showCalculationDetails)}>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-base">Calculation Details</CardTitle>
                        <Button variant="ghost" size="icon">
                          {showCalculationDetails ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                        </Button>
                      </div>
                    </CardHeader>
                    {showCalculationDetails && (
                      <CardContent className="pt-0">
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-500">Raw Yes Probability:</span>
                            <span>{(result.rawYesProb * 100).toFixed(2)}%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-500">Confidence Factor:</span>
                            <span>{result.confidenceFactor.toFixed(3)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-500">Smart Edge Score:</span>
                            <span>{result.gravitySmart.toFixed(4)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-500">Smart Yes Capital:</span>
                            <span>{formatCurrency(result.smartYesCapital)}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-500">Smart No Capital:</span>
                            <span>{formatCurrency(result.smartNoCapital)}</span>
                          </div>
                        </div>
                        
                        <div className="mt-4">
                          <h4 className="text-sm font-medium mb-2">Top Trader Influences</h4>
                          <div className="max-h-40 overflow-y-auto">
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Trader</TableHead>
                                  <TableHead>Smart Score</TableHead>
                                  <TableHead>Side</TableHead>
                                  <TableHead>Influence</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {result.traderInfluences.slice(0, 5).map((trader, index) => (
                                  <TableRow key={index}>
                                    <TableCell className="font-medium">{trader.name}</TableCell>
                                    <TableCell>{trader.smartScore}</TableCell>
                                    <TableCell>{trader.sentiment.toUpperCase()}</TableCell>
                                    <TableCell className={getEdgeColor(trader.weight)}>
                                      {trader.influencePercent.toFixed(1)}%
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </div>
                        </div>
                      </CardContent>
                    )}
                  </Card>
                </div>
              </div>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
} 